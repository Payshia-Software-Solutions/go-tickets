datasource db {
  provider = "sqlite" // or "postgresql", "mysql", "sqlserver", "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  isAdmin   Boolean   @default(false)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Organizer {
  id            String   @id @default(cuid())
  name          String
  contactEmail  String   @unique
  website       String?
  events        Event[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Event {
  id              String       @id @default(cuid())
  name            String
  slug            String       @unique
  date            DateTime // This can now represent the *main* or *first* date, or be less significant if all shows have specific dates.
  location        String
  description     String?
  category        String
  imageUrl        String
  organizerId     String
  organizer       Organizer    @relation(fields: [organizerId], references: [id])
  venueName       String
  venueAddress    String?
  ticketTypes     TicketType[]
  showTimes       ShowTime[]   // Relation to ShowTime
  bookings        Booking[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([organizerId])
  @@index([date])
  @@index([category])
}

model TicketType {
  id                      String                         @id @default(cuid())
  name                    String // e.g., General Admission, VIP
  price                   Float
  description             String?
  availability            Int // Template/Default availability for new showtimes
  event                   Event                          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId                 String
  showTimeAvailabilities  ShowTimeTicketAvailability[] // Relation to specific showtime availabilities
  bookedTickets           BookedTicket[]                 // Relation to booked tickets of this type (across all showtimes)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model ShowTime {
  id                      String                         @id @default(cuid())
  dateTime                DateTime
  event                   Event                          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId                 String
  ticketAvailabilities    ShowTimeTicketAvailability[]
  bookedTickets           BookedTicket[]                 // Tickets booked for this specific showtime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId, dateTime])
}

model ShowTimeTicketAvailability {
  id               String     @id @default(cuid())
  showTime         ShowTime   @relation(fields: [showTimeId], references: [id], onDelete: Cascade)
  showTimeId       String
  ticketType       TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade) // Cascade if TicketType is deleted (should be handled carefully if bookings exist)
  ticketTypeId     String
  availableCount   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([showTimeId, ticketTypeId])
  @@index([ticketTypeId])
}

model BookedTicket {
  id             String     @id @default(cuid())
  booking        Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId      String
  eventNsid      String     // Storing slug for potential historical reference
  ticketType     TicketType @relation(fields: [ticketTypeId], references: [id], onDelete:Restrict) // Restrict deletion of TicketType if booked
  ticketTypeId   String
  showTime       ShowTime   @relation(fields: [showTimeId], references: [id], onDelete: Restrict) // Restrict deletion of ShowTime if booked
  showTimeId     String
  ticketTypeName String     // Denormalized for easier display on booking
  quantity       Int
  pricePerTicket Float      // Price at the time of booking

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([ticketTypeId])
  @@index([showTimeId])
}

model Booking {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Restrict) // Restrict event deletion if bookings exist
  eventId       String
  totalPrice    Float
  bookingDate   DateTime       @default(now())
  eventName     String         // Denormalized
  eventDate     DateTime       // Denormalized - this should now be the specific show's date/time
  eventLocation String         // Denormalized
  qrCodeValue   String         @unique
  bookedTickets BookedTicket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([eventId])
}