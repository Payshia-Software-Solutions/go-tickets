
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Change this to "postgresql", "mysql", etc. based on your database
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  isAdmin   Boolean   @default(false)
  bookings  Booking[]
}

model Organizer {
  id            String  @id @default(cuid())
  name          String
  contactEmail  String
  website       String?
  events        Event[]
}

model Event {
  id            String      @id @default(cuid())
  slug          String      @unique
  name          String
  date          DateTime
  location      String
  description   String
  category      String
  imageUrl      String
  organizer     Organizer   @relation(fields: [organizerId], references: [id])
  organizerId   String
  venueName     String
  venueAddress  String?
  venueMapLink  String?
  ticketTypes   TicketType[]
  bookings      Booking[]
}

model TicketType {
  id            String  @id @default(cuid())
  name          String  // e.g., General Admission, VIP
  price         Float
  availability  Int
  description   String?
  event         Event   @relation(fields: [eventId], references: [id])
  eventId       String
  
  @@unique([eventId, name]) // Ensure ticket type names are unique per event
}

// Represents a purchased ticket in a booking
model BookedTicket {
  id              String    @id @default(cuid())
  booking         Booking   @relation(fields: [bookingId], references: [id])
  bookingId       String
  eventNsid       String    // Storing slug for reference, though eventId links to Event
  ticketTypeId    String    // This might refer to an original TicketType's ID or its name if not strictly relational
  ticketTypeName  String
  quantity        Int
  pricePerTicket  Float
}

model Booking {
  id              String          @id @default(cuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  event           Event           @relation(fields: [eventId], references: [id])
  eventId         String
  bookedTickets   BookedTicket[]
  totalPrice      Float
  bookingDate     DateTime        @default(now())
  eventName       String          // Denormalized for easier display
  eventDate       DateTime        // Denormalized for easier display
  eventLocation   String          // Denormalized for easier display
  qrCodeValue     String          @unique
}
